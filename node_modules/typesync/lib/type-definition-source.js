"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var util_1 = require("./util");
var zlip = __importStar(require("zlib"));
var typedefsUrl = 'https://typespublisher.blob.core.windows.net/typespublisher/data/search-index-min.json';
var npmClient = axios_1.default.create({
    baseURL: 'https://registry.npmjs.org'
});
/**
 * Used to pull definitions.
 */
function createTypeDefinitionSource() {
    return {
        /**
         * Fetches available type defs.
         */
        fetch: function () {
            return axios_1.default
                .get(typedefsUrl, {
                responseType: 'stream'
            })
                .then(unzipResponse)
                .then(function (data) {
                return data.map(function (d) { return ({
                    typingsName: d.t
                }); });
            });
        },
        /**
         * Gets the latest version of a typings package.
         */
        getLatestTypingsVersion: function (typingsPackageName) {
            return npmClient
                .get("" + util_1.typed(typingsPackageName, true))
                .then(function (r) { return r.data['dist-tags'].latest; });
        }
    };
}
exports.createTypeDefinitionSource = createTypeDefinitionSource;
/**
 * Unzips a gzip-encoded response.
 *
 * @param response
 */
function unzipResponse(response) {
    return new Promise(function (resolve) {
        var unzip = zlip.createGunzip();
        var json = '';
        unzip.on('data', function (chunk) { return (json += chunk.toString()); });
        unzip.on('end', function () { return resolve(JSON.parse(json)); });
        response.data.pipe(unzip);
    });
}
//# sourceMappingURL=type-definition-source.js.map