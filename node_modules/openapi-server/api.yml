openapi: 3.0.0
info:
  title: Example API
  version: 0.0.1
  description: API description
paths:
  /200:
    get:
      responses:
        "200":
          description: ok
          content:
            text/html:
              schema:
                type: string
  /200/json:
    get:
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                type: object
  /500:
    get:
      responses:
        "500":
          description: server error
          content:
            text/html:
              schema:
                type: string

  /500/json:
    get:
      responses:
        "500":
          description: server error
          content:
            application/json:
              schema:
                type: object
  /routes/500:
    get:
      responses:
        "500":
          description: server error
          content:
            text/html:
              schema:
                type: string

  /routes/500/json:
    get:
      responses:
        "500":
          description: server error
          content:
            application/json:
              schema:
                type: object

  /routes:
    post:
      operationId: createRoute
      responses:
        "201":
          description: "Ok, route created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
      requestBody:
        $ref: "#/components/requestBodies/Route"
    get:
      operationId: getAllRoutes
      parameters:
        - in: query
          name: page
          description: the page number
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - in: query
          description: the page size
          name: size
          required: false
          schema:
            type: integer
            format: int32
            default: 1000
        - in: query
          description: "the field to be sorted (e.g.: lastModifiedDate,desc)"
          name: sort
          required: false
          schema:
            type: string
            default: "lastModifiedDate,desc"
      responses:
        "200":
          description: Ok, list of routes
          headers:
            X-Total-Count:
              description: the total number of elements
              schema:
                type: integer
                format: int32
            Link:
              description: >-
                The link header (see https://www.w3.org/wiki/LinkHeader).
                Example:
                </items?page=1&size=20>; rel="next",
                </items?page=1&size=20>; rel="last",
                </items?page=0&size=20>; rel="first"
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Routes"
  "/routes/middleware":
    get:
      operationId: getRouteMiddleware
      responses:
        "200":
          description: description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
  "/routes/proxy":
    get:
      operationId: getRouteProxy
      responses:
        "200":
          description: description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
  "/routes/{routeId}":
    put:
      summary: Updates a route
      operationId: updateRoute
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Ok, route updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
      requestBody:
        $ref: "#/components/requestBodies/Route"
    get:
      operationId: getRouteDetails
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
    delete:
      summary: Deletes a route
      operationId: deleteRoute
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "Ok, route deleted"
  "/routes/{routeId}/sub/action":
    get:
      operationId: routeSubAction
      parameters:
        - in: path
          name: routeId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: description
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Route"
servers:
  - url: "http://localhost:3000/api"
components:
  requestBodies:
    Route:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Route"
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Routes:
      type: array
      items:
        $ref: "#/components/schemas/Route"
    Route:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        date:
          type: "string"
          format: "date-time"
      additionalProperties:
        $ref: "#/components/schemas/Options"
    Options:
      type: array
      items:
        $ref: "#/components/schemas/Option"
    Option:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseOption"
        - type: object
          properties:
            description:
              type: string
          additionalProperties:
            type: string
    BaseOption:
      type: object
      properties:
        id:
          type: number
        name:
          type: number
        date:
          type: "string"
          format: "date-time"
