"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const json_refs_1 = __importDefault(require("json-refs"));
const json_schema_resolve_allof_1 = __importDefault(require("json-schema-resolve-allof"));
exports.default = (file) => __awaiter(this, void 0, void 0, function* () {
    const spec = yield loadYaml(file);
    let resolvedSpec = yield resolve(spec);
    resolvedSpec = json_schema_resolve_allof_1.default(resolvedSpec);
    return resolvedSpec;
});
const loadYaml = (file) => __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        fs_1.default.readFile(file, "utf8", (err, data) => {
            if (err) {
                return reject(new Error(`Unable to load file ${file}`));
            }
            try {
                const spec = js_yaml_1.default.safeLoad(data);
                resolve(spec);
            }
            catch (err) {
                reject(new Error(`Error reading file ${file}`));
            }
        });
    });
});
const resolve = (spec) => __awaiter(this, void 0, void 0, function* () {
    const options = {
        loaderOptions: {
            processContent: function (res, callback) {
                callback(null, js_yaml_1.default.safeLoad(res.text));
            }
        }
    };
    const res = yield json_refs_1.default.resolveRefs(spec, options);
    return res.resolved;
});
//# sourceMappingURL=load.js.map