"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const log_1 = require("./log");
class RemoteError {
    constructor(source, error) {
        this._remote = true;
        this.source = source;
        this.error = error;
    }
}
exports.RemoteError = RemoteError;
exports.default = (url) => (req, res, next) => __awaiter(this, void 0, void 0, function* () {
    const fullUrl = `${url}${req.url}`;
    try {
        const headers = req.headers;
        const method = req.method.toLowerCase();
        const response = yield axios_1.default({
            method,
            headers,
            url: fullUrl,
            data: req.body,
            withCredentials: true,
            httpAgent: new http_1.default.Agent(),
            httpsAgent: new https_1.default.Agent()
        });
        res.locals.body = response.data;
        res.set(response.headers);
        res.set("Forwarded", `for=${url}`);
        log_1.log({
            "Request forwarded to": `${method.toUpperCase()} ${fullUrl}`,
            "Request body": req.body,
            "Response body": response.data
        });
        next();
    }
    catch (err) {
        if (err.response) {
            // it's an axios error
            next(new RemoteError(fullUrl, err.response));
            return;
        }
        next(err);
    }
});
//# sourceMappingURL=proxy.js.map