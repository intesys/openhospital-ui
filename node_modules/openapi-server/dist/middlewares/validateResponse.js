"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Validates the response, based on api.yml
 *
 * Api.yml is transformed in `req.swagger` by swagger-express-middleware metadata().
 * Response schema is provided by `req.swagger` and validated by Ajv (a popular JSONschema validaor)
 *
 * References:
 * - OpenAPI v.2.0 (Swagger 2.0): https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md
 * - OpenAPI v.3.0.2: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md
 * - Ajv: https://ajv.js.org
 * - JsonSchema: http://json-schema.org/
 */
const lodash_1 = require("lodash");
const validate_1 = __importDefault(require("../lib/validate"));
exports.default = (spec) => (req, res, next) => {
    const code = res.statusCode || 200;
    const format = res.get('Content-Type') || 'application/json';
    const schema = getResponseSchema(spec, code, format);
    try {
        validate_1.default(schema, res.locals.body);
        next();
    }
    catch (err) {
        const message = `invalid response: ${err.message}`;
        next(new Error(message));
    }
};
const getResponseSchema = (spec, code, format) => {
    return lodash_1.get(spec, `responses.${code}.schema`) // swagger v.2
        || lodash_1.get(spec, `responses.default.schema`) // swagger v.2
        || lodash_1.get(spec, `responses.${code}.content.${format}.schema`) // openapi v.3.0.*
        || lodash_1.get(spec, `responses.default.content.${format}.schema`); // openapi v.3.0.*
};
//# sourceMappingURL=validateResponse.js.map