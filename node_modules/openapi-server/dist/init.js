"use strict";
/**
 * Given an express instance:
 * - configures the router
 * - starts server
 * - returns the server
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("./lib/globals");
const log_1 = require("./lib/log");
const router_1 = __importDefault(require("./router"));
const handleSigint_1 = __importDefault(require("./lib/handleSigint"));
const port = globals_1.API_PORT || '3000';
const init = (app) => __awaiter(this, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
        try {
            app.set('trust proxy', true);
            const _router = yield router_1.default();
            app.use(_router);
            const server = app.listen(port, () => {
                log_1.clear();
                log_1.print(`Server running at ${globals_1.API_PROTOCOL}://${globals_1.API_HOSTNAME}:${port}`);
                log_1.print({
                    'Api yml': globals_1.API_YML,
                    'Api prefix': globals_1.API_PREFIX,
                    'Mock path': globals_1.MOCKS_PATH,
                    'Proxy URL': globals_1.proxyUrl,
                    'Validate responses': globals_1.SKIP_VALIDATION ? 'disabled' : 'enabled',
                    'Log requests': globals_1.LOG ? 'enabled' : 'disabled',
                    'Watch mode': globals_1.WATCH ? 'enabled' : 'disabled'
                });
                resolve(server);
            });
            server.on('error', (e) => {
                console.log(e);
            });
            handleSigint_1.default(server);
        }
        catch (err) {
            reject(err);
        }
    }));
});
exports.default = init;
//# sourceMappingURL=init.js.map