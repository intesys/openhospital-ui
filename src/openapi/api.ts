// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Open Hospital API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BasicPersonalInfo
 */
export interface BasicPersonalInfo {
    /**
     * 
     * @type {string}
     * @memberof BasicPersonalInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPersonalInfo
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPersonalInfo
     */
    surname?: string;
    /**
     * 
     * @type {number}
     * @memberof BasicPersonalInfo
     */
    age?: number;
    /**
     * 
     * @type {string}
     * @memberof BasicPersonalInfo
     */
    gender?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPersonalInfo
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPersonalInfo
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicPersonalInfo
     */
    address?: string;
}
/**
 * 
 * @export
 * @interface DoctorInfo
 */
export interface DoctorInfo extends BasicPersonalInfo {
    /**
     * 
     * @type {string}
     * @memberof DoctorInfo
     */
    specialty?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
    /**
     * Check out the documentation for more info.
     * @type {string}
     * @memberof ModelError
     */
    link?: string;
}
/**
 * 
 * @export
 * @interface PatientInfo
 */
export interface PatientInfo extends BasicPersonalInfo {
    /**
     * 
     * @type {boolean}
     * @memberof PatientInfo
     */
    isChronic?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatientInfo
     */
    bloodType?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientInfo
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientInfo
     */
    lastAdmission?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientInfo
     */
    reasonOfVisit?: string;
    /**
     * 
     * @type {string}
     * @memberof PatientInfo
     */
    treatment?: string;
    /**
     * 
     * @type {BasicPersonalInfo}
     * @memberof PatientInfo
     */
    nextKin?: BasicPersonalInfo;
    /**
     * 
     * @type {DoctorInfo}
     * @memberof PatientInfo
     */
    lastDocToVisit?: DoctorInfo;
}

/**
 * PatientsApi - axios parameter creator
 * @export
 */
export const PatientsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch patient by id
         * @param {string} patientId id of patient to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPatientIdGet(patientId: string, options: any = {}): RequestArgs {
            // verify required parameter 'patientId' is not null or undefined
            if (patientId === null || patientId === undefined) {
                throw new RequiredError('patientId','Required parameter patientId was null or undefined when calling patientPatientIdGet.');
            }
            const localVarPath = `/patient/{patient_id}`
                .replace(`{${"patient_id"}}`, encodeURIComponent(String(patientId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Fetch all the patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet(options: any = {}): RequestArgs {
            const localVarPath = `/patients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientsApi - functional programming interface
 * @export
 */
export const PatientsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch patient by id
         * @param {string} patientId id of patient to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPatientIdGet(patientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatientInfo> {
            const localVarAxiosArgs = PatientsApiAxiosParamCreator(configuration).patientPatientIdGet(patientId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Fetch all the patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PatientInfo>> {
            const localVarAxiosArgs = PatientsApiAxiosParamCreator(configuration).patientsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PatientsApi - factory interface
 * @export
 */
export const PatientsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Fetch patient by id
         * @param {string} patientId id of patient to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPatientIdGet(patientId: string, options?: any) {
            return PatientsApiFp(configuration).patientPatientIdGet(patientId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Fetch all the patients
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientsGet(options?: any) {
            return PatientsApiFp(configuration).patientsGet(options)(axios, basePath);
        },
    };
};

/**
 * PatientsApi - object-oriented interface
 * @export
 * @class PatientsApi
 * @extends {BaseAPI}
 */
export class PatientsApi extends BaseAPI {
    /**
     * 
     * @summary Fetch patient by id
     * @param {string} patientId id of patient to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public patientPatientIdGet(patientId: string, options?: any) {
        return PatientsApiFp(this.configuration).patientPatientIdGet(patientId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Fetch all the patients
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientsApi
     */
    public patientsGet(options?: any) {
        return PatientsApiFp(this.configuration).patientsGet(options)(this.axios, this.basePath);
    }

}


