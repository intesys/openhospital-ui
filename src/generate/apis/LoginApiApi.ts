// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Authentication,
    AuthenticationFromJSON,
    AuthenticationToJSON,
} from '../models';

export interface LoginUsingPOSTRequest {
    password: string;
    username: string;
}

/**
 * no description
 */
export class LoginApiApi extends runtime.BaseAPI {

    /**
     * Login with the given credentials.
     * Login
     */
    async loginUsingPOSTRaw(requestParameters: LoginUsingPOSTRequest): Promise<runtime.ApiResponse<Authentication>> {
        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginUsingPOST.');
        }

        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling loginUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationFromJSON(jsonValue));
    }

    /**
     * Login with the given credentials.
     * Login
     */
    async loginUsingPOST(requestParameters: LoginUsingPOSTRequest): Promise<Authentication> {
        const response = await this.loginUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * Logout the current user.
     * Logout
     */
    async logoutUsingPOSTRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout the current user.
     * Logout
     */
    async logoutUsingPOST(): Promise<void> {
        await this.logoutUsingPOSTRaw();
    }

}
