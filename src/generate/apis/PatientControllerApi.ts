// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Patient,
    PatientFromJSON,
    PatientToJSON,
} from '../models';

export interface DeletePatientUsingDELETERequest {
    code: number;
}

export interface GetPatientUsingGETRequest {
    code?: number;
}

export interface GetPatientsUsingGETRequest {
    page?: number;
    size?: number;
}

export interface NewPatientUsingPOSTRequest {
    newPatient: Patient;
}

export interface SearchPatientUsingGETRequest {
    code?: number;
    name?: string;
}

export interface UpdatePatientUsingPUTRequest {
    code: string;
    patient: Patient;
}

/**
 * no description
 */
export class PatientControllerApi extends runtime.BaseAPI {
  NewPatientUsingPOSTRequest(requestParams: NewPatientUsingPOSTRequest) {
    throw new Error("Method not implemented.");
  }

    /**
     * deletePatient
     */
    async deletePatientUsingDELETERaw(requestParameters: DeletePatientUsingDELETERequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deletePatientUsingDELETE.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * deletePatient
     */
    async deletePatientUsingDELETE(requestParameters: DeletePatientUsingDELETERequest): Promise<void> {
        await this.deletePatientUsingDELETERaw(requestParameters);
    }

    /**
     * getPatient
     */
    async getPatientUsingGETRaw(requestParameters: GetPatientUsingGETRequest): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling getPatientUsingGET.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * getPatient
     */
    async getPatientUsingGET(requestParameters: GetPatientUsingGETRequest): Promise<Patient> {
        const response = await this.getPatientUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * getPatients
     */
    async getPatientsUsingGETRaw(requestParameters: GetPatientsUsingGETRequest): Promise<runtime.ApiResponse<Array<Patient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PatientFromJSON));
    }

    /**
     * getPatients
     */
    async getPatientsUsingGET(requestParameters: GetPatientsUsingGETRequest): Promise<Array<Patient>> {
        const response = await this.getPatientsUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * newPatient
     */
    async newPatientUsingPOSTRaw(requestParameters: NewPatientUsingPOSTRequest): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.newPatient === null || requestParameters.newPatient === undefined) {
            throw new runtime.RequiredError('newPatient','Required parameter requestParameters.newPatient was null or undefined when calling newPatientUsingPOST.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PatientToJSON(requestParameters.newPatient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * newPatient
     */
    async newPatientUsingPOST(requestParameters: NewPatientUsingPOSTRequest): Promise<Patient> {
        const response = await this.newPatientUsingPOSTRaw(requestParameters);
        return await response.value();
    }

    /**
     * searchPatient
     */
    async searchPatientUsingGETRaw(requestParameters: SearchPatientUsingGETRequest): Promise<runtime.ApiResponse<Patient>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * searchPatient
     */
    async searchPatientUsingGET(requestParameters: SearchPatientUsingGETRequest): Promise<Patient> {
        const response = await this.searchPatientUsingGETRaw(requestParameters);
        return await response.value();
    }

    /**
     * updatePatient
     */
    async updatePatientUsingPUTRaw(requestParameters: UpdatePatientUsingPUTRequest): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling updatePatientUsingPUT.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatientUsingPUT.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * updatePatient
     */
    async updatePatientUsingPUT(requestParameters: UpdatePatientUsingPUTRequest): Promise<Patient> {
        const response = await this.updatePatientUsingPUTRaw(requestParameters);
        return await response.value();
    }

}
