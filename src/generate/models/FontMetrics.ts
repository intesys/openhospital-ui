// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Font,
    FontFromJSON,
    FontToJSON,
    FontRenderContext,
    FontRenderContextFromJSON,
    FontRenderContextToJSON,
} from './';

/**
 * 
 * @export
 * @interface FontMetrics
 */
export interface FontMetrics {
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    ascent?: number;
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    descent?: number;
    /**
     * 
     * @type {Font}
     * @memberof FontMetrics
     */
    font?: Font;
    /**
     * 
     * @type {FontRenderContext}
     * @memberof FontMetrics
     */
    fontRenderContext?: FontRenderContext;
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    leading?: number;
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    maxAdvance?: number;
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    maxAscent?: number;
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    maxDecent?: number;
    /**
     * 
     * @type {number}
     * @memberof FontMetrics
     */
    maxDescent?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof FontMetrics
     */
    widths?: Array<number>;
}

export function FontMetricsFromJSON(json: any): FontMetrics {
    return {
        'ascent': !exists(json, 'ascent') ? undefined : json['ascent'],
        'descent': !exists(json, 'descent') ? undefined : json['descent'],
        'font': !exists(json, 'font') ? undefined : FontFromJSON(json['font']),
        'fontRenderContext': !exists(json, 'fontRenderContext') ? undefined : FontRenderContextFromJSON(json['fontRenderContext']),
        'height': !exists(json, 'height') ? undefined : json['height'],
        'leading': !exists(json, 'leading') ? undefined : json['leading'],
        'maxAdvance': !exists(json, 'maxAdvance') ? undefined : json['maxAdvance'],
        'maxAscent': !exists(json, 'maxAscent') ? undefined : json['maxAscent'],
        'maxDecent': !exists(json, 'maxDecent') ? undefined : json['maxDecent'],
        'maxDescent': !exists(json, 'maxDescent') ? undefined : json['maxDescent'],
        'widths': !exists(json, 'widths') ? undefined : json['widths'],
    };
}

export function FontMetricsToJSON(value?: FontMetrics): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'ascent': value.ascent,
        'descent': value.descent,
        'font': FontToJSON(value.font),
        'fontRenderContext': FontRenderContextToJSON(value.fontRenderContext),
        'height': value.height,
        'leading': value.leading,
        'maxAdvance': value.maxAdvance,
        'maxAscent': value.maxAscent,
        'maxDecent': value.maxDecent,
        'maxDescent': value.maxDescent,
        'widths': value.widths,
    };
}


