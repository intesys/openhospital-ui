// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
    Blob,
    BlobFromJSON,
    BlobToJSON,
    Image,
    ImageFromJSON,
    ImageToJSON,
} from './';

/**
 * 
 * @export
 * @interface Patient
 */
export interface Patient {
    lastDocWhoVisitedHim: { name: string; surname: string; occupation: string | undefined; phone: string; email: string; };
    isChronic: boolean | undefined;
   
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    address?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    age?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    agetype?: string;
    /**
     * 
     * @type {Date}
     * @memberof Patient
     */
    birthDate?: Date;
    /**
     * 
     * @type {Blob}
     * @memberof Patient
     */
    blobPhoto?: Blob;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    bloodType?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    city?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    father?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    fatherName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    hasInsurance?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    height?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    informations?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    lock?: number;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    months?: number;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    mother?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    motherName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    nextKin?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    parentTogether?: string;
    /**
     * 
     * @type {Image}
     * @memberof Patient
     */
    photo?: Image;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    searchString?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    secondName?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    sex?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    taxCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Patient
     */
    telephone?: string;
    /**
     * 
     * @type {number}
     * @memberof Patient
     */
    weight?: number;
}

export function PatientFromJSON(json: any): Patient {
    return {
        'address': !exists(json, 'address') ? undefined : json['address'],
        'age': !exists(json, 'age') ? undefined : json['age'],
        'agetype': !exists(json, 'agetype') ? undefined : json['agetype'],
        'birthDate': !exists(json, 'birthDate') ? undefined : new Date(json['birthDate']),
        'blobPhoto': !exists(json, 'blobPhoto') ? undefined : BlobFromJSON(json['blobPhoto']),
        'bloodType': !exists(json, 'bloodType') ? undefined : json['bloodType'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'father': !exists(json, 'father') ? undefined : json['father'],
        'fatherName': !exists(json, 'father_name') ? undefined : json['father_name'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'hasInsurance': !exists(json, 'hasInsurance') ? undefined : json['hasInsurance'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'informations': !exists(json, 'informations') ? undefined : json['informations'],
        'lock': !exists(json, 'lock') ? undefined : json['lock'],
        'months': !exists(json, 'months') ? undefined : json['months'],
        'mother': !exists(json, 'mother') ? undefined : json['mother'],
        'motherName': !exists(json, 'mother_name') ? undefined : json['mother_name'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nextKin': !exists(json, 'nextKin') ? undefined : json['nextKin'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'parentTogether': !exists(json, 'parentTogether') ? undefined : json['parentTogether'],
        'photo': !exists(json, 'photo') ? undefined : ImageFromJSON(json['photo']),
        'searchString': !exists(json, 'searchString') ? undefined : json['searchString'],
        'secondName': !exists(json, 'secondName') ? undefined : json['secondName'],
        'sex': !exists(json, 'sex') ? undefined : json['sex'],
        'taxCode': !exists(json, 'taxCode') ? undefined : json['taxCode'],
        'telephone': !exists(json, 'telephone') ? undefined : json['telephone'],
        'weight': !exists(json, 'weight') ? undefined : json['weight'],
    };
}



export function PatientToJSON(value?: Patient): any {
    if (value === undefined) {
        return undefined;
    }
   
    return {
        'address': value.address,
        'age': value.age,
        'agetype': value.agetype,
        'birthDate': value.birthDate,
        'blobPhoto': BlobToJSON(value.blobPhoto),
        'bloodType': value.bloodType,
        'city': value.city,
        'code': value.code,
        'father': value.father,
        'father_name': value.fatherName,
        'firstName': value.firstName,
        'hasInsurance': value.hasInsurance,
        'height': value.height,
        'informations': value.informations,
        'lock': value.lock,
        'months': value.months,
        'mother': value.mother,
        'mother_name': value.motherName,
        'name': value.name,
        'nextKin': value.nextKin,
        'note': value.note,
        'parentTogether': value.parentTogether,
        'photo': ImageToJSON(value.photo),
        'searchString': value.searchString,
        'secondName': value.secondName,
        'sex': value.sex,
        'taxCode': value.taxCode,
        'telephone': value.telephone,
        'weight': value.weight,
    };
}


