// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Color,
    ColorFromJSON,
    ColorToJSON,
    Font,
    FontFromJSON,
    FontToJSON,
    FontMetrics,
    FontMetricsFromJSON,
    FontMetricsToJSON,
    Rectangle,
    RectangleFromJSON,
    RectangleToJSON,
    Shape,
    ShapeFromJSON,
    ShapeToJSON,
} from './';

/**
 * 
 * @export
 * @interface Graphics
 */
export interface Graphics {
    /**
     * 
     * @type {Shape}
     * @memberof Graphics
     */
    clip?: Shape;
    /**
     * 
     * @type {Rectangle}
     * @memberof Graphics
     */
    clipBounds?: Rectangle;
    /**
     * 
     * @type {Rectangle}
     * @memberof Graphics
     */
    clipRect?: Rectangle;
    /**
     * 
     * @type {Color}
     * @memberof Graphics
     */
    color?: Color;
    /**
     * 
     * @type {Font}
     * @memberof Graphics
     */
    font?: Font;
    /**
     * 
     * @type {FontMetrics}
     * @memberof Graphics
     */
    fontMetrics?: FontMetrics;
    /**
     * 
     * @type {Color}
     * @memberof Graphics
     */
    xormode?: Color;
}

export function GraphicsFromJSON(json: any): Graphics {
    return {
        'clip': !exists(json, 'clip') ? undefined : ShapeFromJSON(json['clip']),
        'clipBounds': !exists(json, 'clipBounds') ? undefined : RectangleFromJSON(json['clipBounds']),
        'clipRect': !exists(json, 'clipRect') ? undefined : RectangleFromJSON(json['clipRect']),
        'color': !exists(json, 'color') ? undefined : ColorFromJSON(json['color']),
        'font': !exists(json, 'font') ? undefined : FontFromJSON(json['font']),
        'fontMetrics': !exists(json, 'fontMetrics') ? undefined : FontMetricsFromJSON(json['fontMetrics']),
        'xormode': !exists(json, 'xormode') ? undefined : ColorFromJSON(json['xormode']),
    };
}

export function GraphicsToJSON(value?: Graphics): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'clip': ShapeToJSON(value.clip),
        'clipBounds': RectangleToJSON(value.clipBounds),
        'clipRect': RectangleToJSON(value.clipRect),
        'color': ColorToJSON(value.color),
        'font': FontToJSON(value.font),
        'fontMetrics': FontMetricsToJSON(value.fontMetrics),
        'xormode': ColorToJSON(value.xormode),
    };
}


