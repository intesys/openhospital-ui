// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Dimension,
    DimensionFromJSON,
    DimensionToJSON,
    Point,
    PointFromJSON,
    PointToJSON,
    Rectangle2D,
    Rectangle2DFromJSON,
    Rectangle2DToJSON,
} from './';

/**
 * 
 * @export
 * @interface Rectangle
 */
export interface Rectangle {
    /**
     * 
     * @type {Rectangle2D}
     * @memberof Rectangle
     */
    bounds2D?: Rectangle2D;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    centerX?: number;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    centerY?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Rectangle
     */
    empty?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    height?: number;
    /**
     * 
     * @type {Point}
     * @memberof Rectangle
     */
    location?: Point;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    maxX?: number;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    maxY?: number;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    minX?: number;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    minY?: number;
    /**
     * 
     * @type {Rectangle2D}
     * @memberof Rectangle
     */
    rect?: Rectangle2D;
    /**
     * 
     * @type {Dimension}
     * @memberof Rectangle
     */
    size?: Dimension;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof Rectangle
     */
    y?: number;
}

export function RectangleFromJSON(json: any): Rectangle {
    return {
        'bounds2D': !exists(json, 'bounds2D') ? undefined : Rectangle2DFromJSON(json['bounds2D']),
        'centerX': !exists(json, 'centerX') ? undefined : json['centerX'],
        'centerY': !exists(json, 'centerY') ? undefined : json['centerY'],
        'empty': !exists(json, 'empty') ? undefined : json['empty'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'location': !exists(json, 'location') ? undefined : PointFromJSON(json['location']),
        'maxX': !exists(json, 'maxX') ? undefined : json['maxX'],
        'maxY': !exists(json, 'maxY') ? undefined : json['maxY'],
        'minX': !exists(json, 'minX') ? undefined : json['minX'],
        'minY': !exists(json, 'minY') ? undefined : json['minY'],
        'rect': !exists(json, 'rect') ? undefined : Rectangle2DFromJSON(json['rect']),
        'size': !exists(json, 'size') ? undefined : DimensionFromJSON(json['size']),
        'width': !exists(json, 'width') ? undefined : json['width'],
        'x': !exists(json, 'x') ? undefined : json['x'],
        'y': !exists(json, 'y') ? undefined : json['y'],
    };
}

export function RectangleToJSON(value?: Rectangle): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'bounds2D': Rectangle2DToJSON(value.bounds2D),
        'centerX': value.centerX,
        'centerY': value.centerY,
        'empty': value.empty,
        'height': value.height,
        'location': PointToJSON(value.location),
        'maxX': value.maxX,
        'maxY': value.maxY,
        'minX': value.minX,
        'minY': value.minY,
        'rect': Rectangle2DToJSON(value.rect),
        'size': DimensionToJSON(value.size),
        'width': value.width,
        'x': value.x,
        'y': value.y,
    };
}


