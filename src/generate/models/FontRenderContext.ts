// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AffineTransform,
    AffineTransformFromJSON,
    AffineTransformToJSON,
} from './';

/**
 * 
 * @export
 * @interface FontRenderContext
 */
export interface FontRenderContext {
    /**
     * 
     * @type {boolean}
     * @memberof FontRenderContext
     */
    antiAliased?: boolean;
    /**
     * 
     * @type {object}
     * @memberof FontRenderContext
     */
    antiAliasingHint?: object;
    /**
     * 
     * @type {object}
     * @memberof FontRenderContext
     */
    fractionalMetricsHint?: object;
    /**
     * 
     * @type {AffineTransform}
     * @memberof FontRenderContext
     */
    transform?: AffineTransform;
    /**
     * 
     * @type {number}
     * @memberof FontRenderContext
     */
    transformType?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FontRenderContext
     */
    transformed?: boolean;
}

export function FontRenderContextFromJSON(json: any): FontRenderContext {
    return {
        'antiAliased': !exists(json, 'antiAliased') ? undefined : json['antiAliased'],
        'antiAliasingHint': !exists(json, 'antiAliasingHint') ? undefined : json['antiAliasingHint'],
        'fractionalMetricsHint': !exists(json, 'fractionalMetricsHint') ? undefined : json['fractionalMetricsHint'],
        'transform': !exists(json, 'transform') ? undefined : AffineTransformFromJSON(json['transform']),
        'transformType': !exists(json, 'transformType') ? undefined : json['transformType'],
        'transformed': !exists(json, 'transformed') ? undefined : json['transformed'],
    };
}

export function FontRenderContextToJSON(value?: FontRenderContext): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'antiAliased': value.antiAliased,
        'antiAliasingHint': value.antiAliasingHint,
        'fractionalMetricsHint': value.fractionalMetricsHint,
        'transform': AffineTransformToJSON(value.transform),
        'transformType': value.transformType,
        'transformed': value.transformed,
    };
}


