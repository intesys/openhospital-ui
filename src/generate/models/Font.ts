// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AffineTransform,
    AffineTransformFromJSON,
    AffineTransformToJSON,
} from './';

/**
 * 
 * @export
 * @interface Font
 */
export interface Font {
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof Font
     */
    attributes?: { [key: string]: object; };
    /**
     * 
     * @type {Array<object>}
     * @memberof Font
     */
    availableAttributes?: Array<object>;
    /**
     * 
     * @type {boolean}
     * @memberof Font
     */
    bold?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Font
     */
    family?: string;
    /**
     * 
     * @type {string}
     * @memberof Font
     */
    fontName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Font
     */
    italic?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Font
     */
    italicAngle?: number;
    /**
     * 
     * @type {number}
     * @memberof Font
     */
    missingGlyphCode?: number;
    /**
     * 
     * @type {string}
     * @memberof Font
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Font
     */
    numGlyphs?: number;
    /**
     * 
     * @type {object}
     * @memberof Font
     */
    peer?: object;
    /**
     * 
     * @type {boolean}
     * @memberof Font
     */
    plain?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Font
     */
    psname?: string;
    /**
     * 
     * @type {number}
     * @memberof Font
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof Font
     */
    size2D?: number;
    /**
     * 
     * @type {number}
     * @memberof Font
     */
    style?: number;
    /**
     * 
     * @type {AffineTransform}
     * @memberof Font
     */
    transform?: AffineTransform;
    /**
     * 
     * @type {boolean}
     * @memberof Font
     */
    transformed?: boolean;
}

export function FontFromJSON(json: any): Font {
    return {
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'availableAttributes': !exists(json, 'availableAttributes') ? undefined : json['availableAttributes'],
        'bold': !exists(json, 'bold') ? undefined : json['bold'],
        'family': !exists(json, 'family') ? undefined : json['family'],
        'fontName': !exists(json, 'fontName') ? undefined : json['fontName'],
        'italic': !exists(json, 'italic') ? undefined : json['italic'],
        'italicAngle': !exists(json, 'italicAngle') ? undefined : json['italicAngle'],
        'missingGlyphCode': !exists(json, 'missingGlyphCode') ? undefined : json['missingGlyphCode'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'numGlyphs': !exists(json, 'numGlyphs') ? undefined : json['numGlyphs'],
        'peer': !exists(json, 'peer') ? undefined : json['peer'],
        'plain': !exists(json, 'plain') ? undefined : json['plain'],
        'psname': !exists(json, 'psname') ? undefined : json['psname'],
        'size': !exists(json, 'size') ? undefined : json['size'],
        'size2D': !exists(json, 'size2D') ? undefined : json['size2D'],
        'style': !exists(json, 'style') ? undefined : json['style'],
        'transform': !exists(json, 'transform') ? undefined : AffineTransformFromJSON(json['transform']),
        'transformed': !exists(json, 'transformed') ? undefined : json['transformed'],
    };
}

export function FontToJSON(value?: Font): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'attributes': value.attributes,
        'availableAttributes': value.availableAttributes,
        'bold': value.bold,
        'family': value.family,
        'fontName': value.fontName,
        'italic': value.italic,
        'italicAngle': value.italicAngle,
        'missingGlyphCode': value.missingGlyphCode,
        'name': value.name,
        'numGlyphs': value.numGlyphs,
        'peer': value.peer,
        'plain': value.plain,
        'psname': value.psname,
        'size': value.size,
        'size2D': value.size2D,
        'style': value.style,
        'transform': AffineTransformToJSON(value.transform),
        'transformed': value.transformed,
    };
}


